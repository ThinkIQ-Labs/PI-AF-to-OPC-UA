@inject IJSRuntime JS

<div class="row">

    <div class="col-4 pl-4">
        <div class="card mt-3" style="max-height: 60rem;">
            <div class="card-header">
                <h4>
                    OPC UA Model
                </h4>
            </div>
            <div class="card-body">
                <div class="card-title">
                    <EditForm Model="@newNodeSetModel" OnValidSubmit="@CreateNewMd">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <label class="my-1" style="width:80px">Domain</label><InputText @bind-Value="newNodeSetModel.mdDomain" placeholder="https://acme.com/UA"></InputText><br />
                        <label class="my-1" style="width:80px">Name</label><InputText @bind-Value="newNodeSetModel.mdName" placeholder="motor"></InputText><br />
                        <button type="submit" class="btn mt-3 mr-4" style="padding: 0.2em; border: thin solid grey; border-radius: 3px;background-color: #efefef;">
                            @if (nodeSetModel == null)
                            {
                                <span>New UA Model</span>
                            }
                            else
                            {
                                <span>Update Namespace</span>
                            }
                        </button>
                        @if (nodeSetModel != null)
                        {
                            <button disabled="@(nodeSetModel.ObjectTypes==null ? true : (nodeSetModel.ObjectTypes.Count()==0 ? true : false))" type="button" class="btn btn-link ml-4 mt-3" @onclick="ShowNodeSetModal">View NodeSet XML</button>
                        }
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="card mt-3" style="max-height: 46rem;">
            <div class="card-header">
                <h4>
                    Import AF Types from XML
                </h4>
            </div>
            <div class="card-body">
                <div class="card-title">
                    <label class="text-reader">
                        <InputFile OnChange="@LoadFile" />
                    </label>
                    @if (isLoading)
                    {
                        <p>loading...</p>
                    }
                </div>
                @if (AfUiTypes.Count > 0)
                {
                    <hr />
                }
                <div class="list-group" style="max-height: 36rem; overflow-y:auto;">
                    @foreach (var aAfUiType in AfUiTypes)
                    {
                        <div class="list-group">
                            <button class="list-group-item list-group-item-action @(activeAfUiType == null ? "" : (activeAfUiType==aAfUiType ? "active" : ""))"
                                @onclick="() => SetActiveAfUiType(aAfUiType)">
                                @aAfUiType.Name
                                @if (aAfUiType.isSelected)
                                {
                                    if (aAfUiType.canBeRemoved)
                                    {
                                        <span class="oi oi-trash" aria-hidden="true" style="float:right;cursor:pointer;" @onclick="()=>ChangeTypeSpecified(aAfUiType)"></span>
                                    }
                                    else
                                    {
                                        <span class="oi oi-trash" aria-hidden="true" style="float:right;cursor:not-allowed;"
                                  data-toggle="tooltip" data-placement="right" title="@aAfUiType.canBeRemovedErrorHint"></span>
                                    }

                                    @if (aAfUiType.isSelected)
                                    {
                                        <span class="oi oi-circle-check" aria-hidden="true" style="float:right;width:20px;"></span>
                                    }
                                }
                                else
                                {
                                    if (nodeSetModel == null)
                                    {
                                        <span class="oi oi-plus" aria-hidden="true" style="float:right;cursor:not-allowed;"
                                  data-bs-toggle="tooltip" data-bs-placement="right" data-bs-html="true" title="You must create a UA model first."></span>

                                    }
                                    else
                                    {
                                        if (aAfUiType.canBeAdded)
                                        {
                                            <span class="oi oi-plus" aria-hidden="true" style="float:right;cursor:pointer;" @onclick="()=>ChangeTypeSpecified(aAfUiType)"></span>
                                        }
                                        else
                                        {
                                            <span class="oi oi-plus" aria-hidden="true" style="float:right;cursor:not-allowed;"
                                  data-toggle="tooltip" data-placement="right" title="@aAfUiType.canBeAddedErrorHint">
                                            </span>
                                        }
                                    }
                                }
                            </button>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>

    <div class="col-8 pr-4">
        @if (activeAfUiType != null)
        {
            <div class="card mt-3" style="max-height: 60rem; width: 100%">
                <div class="card-header">
                    <h4>
                        SMIP Type Data
                    </h4>
                </div>
                <div class="card-body">
                    <div class="card-title">
                        Name: @activeAfUiType.Name<br />
                        BaseType: @(activeAfUiType.BaseTypeString == null ? "n/a" : activeAfUiType.BaseTypeString)<br />
                    </div>
                    <div class="card-text">
                        Description: @activeAfUiType.AfType.Description<br />
                        <div class="row">
                            <div class="col-4">
                                <br />
                                Attributes:<br />
                                <div class="list-group" style="max-height: 49rem; overflow-y:auto;">
                                    @if (activeAfUiType.AfType.AFAttributeTemplate != null)
                                    {
                                        foreach (var aAfTypeAttribute in activeAfUiType.AfType.AFAttributeTemplate)
                                        {
                                            <button class="list-group-item list-group-item-action @(activeAttribute == null ? "" : (activeAttribute==aAfTypeAttribute ? "active" : ""))"
                                        @onclick="() => SetActiveAttribute(aAfTypeAttribute)">
                                                @aAfTypeAttribute.Name
                                            </button>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="col-8">
                                @if (activeAttribute != null)
                                {
                                    <div>
                                        <br />
                                        Attribute Settings:<br /><br />
                                        Name: @activeAttribute.Name<br />
                                        Description: @activeAttribute.Description<br />
                                        DataType: @activeAttribute.Type<br />
                                        UoM: @(activeAttribute.DefaultUOM == null ? "n/a" : activeAttribute.DefaultUOM)<br />
                                        SourceCategory:  @(activeAttribute.DataReference == null ? "n/a" : activeAttribute.DataReference.Value)<br />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>



@code {

    [Parameter]
    public bool fullscreen { get; set; } = false;

    NewModelDesign newNodeSetModel = new NewModelDesign();

    [CascadingParameter] public IModalService Modal { get; set; }
    void ShowNodeSetModal()
    {
        var parameters = new ModalParameters()
            .Add(nameof(NodeSetPreview.nodeSetModel), nodeSetModel)
            .Add(nameof(NodeSetPreview.baseNodeSets), baseNodeSets);

        var options = new ModalOptions()
            {
                Size = ModalSize.ExtraLarge
            };

        Modal.Show<NodeSetPreview>("OPC UA NodeSet2.xml", parameters, options);
    }

    bool isLoading = false;

    DefaultOpcUaContext opcContext { get; set; }
    UANodeSetModelImporter importer { get; set; }
    public NodeSetModel nodeSetModel { get; set; }
    public Dictionary<string, NodeSetModel> baseNodeSets { get; set; }
    public NodeSetModel uaBaseModel { get; set; }

    uint nextNodeId = 1000;

    async Task CreateNewMd()
    {
        if (nodeSetModel == null)
        {

            const string strNodeSetsDirectory = "NodeSets";
            var file = Path.Combine(strNodeSetsDirectory, "opcfoundation.org.UA.NodeSet2.xml");
            //Console.WriteLine($"Importing {file}");
            var nodesetXml = File.ReadAllText(file);

            opcContext = new DefaultOpcUaContext(NullLogger.Instance);
            importer = new UANodeSetModelImporter(opcContext);

            baseNodeSets = (await importer.ImportNodeSetModelAsync(nodesetXml)).ToDictionary(n => n.ModelUri);
            uaBaseModel = baseNodeSets[Namespaces.OpcUa];

            nodeSetModel = new NodeSetModel
                {
                    ModelUri = $"{newNodeSetModel.mdDomain}{(newNodeSetModel.mdDomain.EndsWith("/") ? "" : "/")}{newNodeSetModel.mdName}",
                    RequiredModels = new List<RequiredModelInfo>
                {
                    new RequiredModelInfo { ModelUri= uaBaseModel.ModelUri, PublicationDate = uaBaseModel.PublicationDate, Version = uaBaseModel.Version}
                },
                };

        }
        else
        {

        }
    }

    AfUiType? activeAfUiType { get; set; }

    void SetActiveAfUiType(AfUiType aAfUiType)
    {
        activeAttribute = null;
        activeAfUiType = aAfUiType;
    }

    void ChangeTypeSpecified(AfUiType aAfUiType)
    {
        if (nodeSetModel == null) return;

        aAfUiType.isSelected = !aAfUiType.isSelected;

        if (aAfUiType.isSelected)
        {

            var newObjectTypeModel = new ObjectTypeModel
                {
                    DisplayName = new List<NodeModel.LocalizedText> { aAfUiType.AfType.Name },
                    BrowseName = aAfUiType.AfType.Name,
                    SuperType = aAfUiType.AfBaseType == null ?
                                    uaBaseModel.ObjectTypes.FirstOrDefault(ot => ot.BrowseName.EndsWith("BaseObjectType")) :
                                    nodeSetModel.ObjectTypes.First(x => x.DisplayName.First().Text == aAfUiType.AfBaseType.Name),
                    NodeSet = nodeSetModel,
                    NodeId = new ExpandedNodeId(nextNodeId++, nodeSetModel.ModelUri).ToString(),
                    Description = new List<NodeModel.LocalizedText> { aAfUiType.AfType.Description == null ? "" : aAfUiType.AfType.Description },
                    Properties = new List<VariableModel>(),
                    DataVariables = new List<DataVariableModel>(),
                };

            // iterate through children
            // does not apply
            //if (aAfUiType.AfType.ChildEquipment.Count > 0)
            //{
            //    newObjectTypeModel.SubTypes = new List<BaseTypeModel>();
            //}

            //foreach (var aAfTypeChild in aAfUiType.AfType.ChildEquipment)
            //{
            //    var aChildObjectType = nodeSetModel.ObjectTypes.First(x => x.SymbolicName == aAfTypeChild.ChildTypeFqn.Last());
            //    newObjectTypeModel.Objects.Add(new ObjectModel()
            //        {
            //            TypeDefinition = aChildObjectType,
            //            SymbolicName = aAfTypeChild.RelativeName,
            //            BrowseName = aAfTypeChild.DisplayName,
            //            DisplayName = new List<NodeModel.LocalizedText> { aAfTypeChild.DisplayName },
            //            NodeSet = nodeSetModel,
            //            NodeId = new ExpandedNodeId(nextNodeId++, nodeSetModel.ModelUri).ToString(),
            //            Description = new List<NodeModel.LocalizedText> { aAfTypeChild.Description == null ? "" : aAfTypeChild.Description },
            //            DataVariables = aChildObjectType.DataVariables,
            //            Properties = aChildObjectType.Properties
            //        });
            //}




            // iterate through attributes
            foreach (var aAfTypeAttribute in aAfUiType.AfType.AFAttributeTemplate)
            {
                if (aAfTypeAttribute.DefaultUOM != "" || aAfTypeAttribute.DataReference?.Value == "PiPoint")
                {
                    // create variable designs for timeseries data
                    // and attributes that have a unit of measure
                    var aDataType = uaBaseModel.DataTypes.FirstOrDefault(ot => ot.BrowseName.EndsWith(aAfTypeAttribute.Type));
                    var newDataVariableModel = new DataVariableModel()
                        {
                            NodeSet = nodeSetModel,
                            NodeId = new ExpandedNodeId(nextNodeId++, nodeSetModel.ModelUri).ToString(),

                            BrowseName = aAfTypeAttribute.Name,
                            DisplayName = new List<NodeModel.LocalizedText> { aAfTypeAttribute.Name },
                            DataType = aDataType,
                            Description = new List<NodeModel.LocalizedText> { aAfTypeAttribute.Description == null ? "" : aAfTypeAttribute.Description }
                        };


                    // add default value
                    if (aAfTypeAttribute.Value.Text != null)
                    {
                        newDataVariableModel.Value = opcContext.JsonEncodeVariant(aAfTypeAttribute.Value.Text[0]);

                    }

                    // create engeneerign unit
                    if (aAfTypeAttribute.DefaultUOM != "")
                    {

                        var aUom = NodeModelOpcExtensions.GetEUInformation(new VariableModel.EngineeringUnitInfo { DisplayName = aAfTypeAttribute.DefaultUOM });

                        if (aUom.UnitId==0)
                        {
                            newDataVariableModel.EngineeringUnit = new VariableModel.EngineeringUnitInfo
                                {
                                    Description = $"Enegineering Unit error: Can't lookup {aAfTypeAttribute.DefaultUOM} in UNECE_to_OPCUA.csv table"
                                };
                        }
                        else
                        {
                            newDataVariableModel.EngineeringUnit = new VariableModel.EngineeringUnitInfo
                                {
                                    DisplayName = aAfTypeAttribute.DefaultUOM
                                };
                        }
                    }

                    newObjectTypeModel.DataVariables.Add(newDataVariableModel);
                }
                else
                {
                    // create simple property for static meta data
                    // and attributes that don't have a unit of measure
                    var aDataType = uaBaseModel.DataTypes.FirstOrDefault(ot => ot.BrowseName.EndsWith(aAfTypeAttribute.Type));
                    PropertyModel newPropertyModel = new PropertyModel()
                        {
                            NodeSet = nodeSetModel,
                            NodeId = new ExpandedNodeId(nextNodeId++, nodeSetModel.ModelUri).ToString(),

                            BrowseName = aAfTypeAttribute.Name,
                            DisplayName = new List<NodeModel.LocalizedText> { aAfTypeAttribute.Name },
                            DataType = aDataType,
                            Description = new List<NodeModel.LocalizedText> { aAfTypeAttribute.Description == null ? "" : aAfTypeAttribute.Description }
                        };


                    // add default value
                    if (aAfTypeAttribute.Value.Text != null)
                    {
                        newPropertyModel.Value = opcContext.JsonEncodeVariant(aAfTypeAttribute.Value.Text[0]);
                    }

                    newObjectTypeModel.Properties.Add(newPropertyModel);
                }
            }


            nodeSetModel.ObjectTypes.Add(newObjectTypeModel);



        }
        else
        {
            //var aList = md.ObjectTypeDesigns;
            //var aKey = md.ObjectTypeDesigns.First(x => x.Value.SymbolicName.Name == aAfUiType.AfType.RelativeName.Replace("_", "")).Key;
            //aList.Remove(aKey);
            //NodeDesign[] array = aList.Select(x => x.Value).ToArray();
            //md.Items = array;

        }

    }


    public List<AfUiType> AfUiTypes = new List<AfUiType>();

    List<AFElementTemplate> afElementTemplates
    {
        get
        {
            if (afEntry == null) return new List<AFElementTemplate>();
            if (afEntry.afModel == null) return new List<AFElementTemplate>();
            return afEntry.afElementTemplates;
        }
    }
    AfUiType? activeTemplate { get; set; }

    AFAttributeTemplate? activeAttribute { get; set; }
    void SetActiveAttribute(AFAttributeTemplate aAfTypeAttribute)
    {
        activeAttribute = aAfTypeAttribute;
    }

    afEntry afEntry = new afEntry();

    async Task LoadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        afEntry = new PIAF_Interop.afEntry();
        activeAttribute = null;
        activeTemplate = null;
        var reader = await new StreamReader(e.File.OpenReadStream(10000000)).ReadToEndAsync();
        afEntry.ReadString(reader);
        isLoading = false;
        AfUiTypes = new List<AfUiType>();

        foreach (var aAfTemplate in afEntry.afElementTemplates)
        {
            AfUiType newType = new AfUiType(this);
            newType.AfType = aAfTemplate;
            newType.isSelected = false;
            newType.BaseTypeString = afEntry.GetAFElementTemplateBaseTypeString(aAfTemplate);
            newType.AfBaseType = afEntry.afElementTemplates.FirstOrDefault(x => x.Name == newType.BaseTypeString);
            AfUiTypes.Add(newType);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("addTooltips");
    }

}
